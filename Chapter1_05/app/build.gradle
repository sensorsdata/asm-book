plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "cn.sensorsdata.asmbook.chapter1_04"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled true
            zipAlignEnabled true
        }

        pre {
            applicationIdSuffix ".pre"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation "com.android.tools.build:gradle:3.2.0"
}

class ServerExtension {
    String message
    ServerNode defalutConfig = new ServerNode()
    NamedDomainObjectContainer<ServerNode> nodesContainer

    ServerExtension(Project project) {
        nodesContainer = project.container(ServerNode)
    }

    //默认节点配置
    void defalutConfig(Action<ServerNode> action) {
        action.execute(defalutConfig)
    }

    //其他节点配置
    void otherConfig(Action<NamedDomainObjectContainer<ServerNode>> action) {
        action.execute(nodesContainer)
    }


    @Override
    public String toString() {
        return "ServerExtension{" +
                "message='" + message + '\'' +
                ", defalutConfig=" + defalutConfig +
                '}';
    }
}

class ServerNode {
    String name
    String address
    String ip
    int cpuCount

    ServerNode(String name) {
        this.name = name
    }

    @Override
    public String toString() {
        return "ServerNode{" +
                "name='" + name + '\'' +
                ", address='" + address + '\'' +
                ", ip='" + ip + '\'' +
                ", cpuCount=" + cpuCount +
                '}';
    }
}

class MyExtensionTestPlugin implements Plugin<Project> {

    @Override
    void apply(Project target) {
        println("My NamedDomainObjectContainer Test Plugin")
        ServerExtension serverNode = target.getExtensions().create("server", ServerExtension, target)
        target.task("getResult") {
            doLast {
                println("result is: $serverNode")
                println("\nshow all other configs:")
                serverNode.nodesContainer.all {
                    println(it)
                }

                println("\nshow shanghai config in other configs:")
                ServerNode node = serverNode.nodesContainer.findByName("shanghai")
                println(node)

            }
        }

    }
}

apply plugin: MyExtensionTestPlugin


server {
    message = "Server Config Info"
    defalutConfig {
        address = "hefei"
        ip = "11.11.11.11"
        cpuCount = 8
    }

    otherConfig {
        shanghai {
            address = "shanghai base"
            ip = "22.22.22.22"
            cpuCount = 8
        }

        chengdu {
            address = "chengdu base"
            ip = "122.122.122.133"
            cpuCount = 8
        }
    }
}
